<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雨醉风尘</title>
  
  <subtitle>日记一事，年复成书</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://inscode.github.io/"/>
  <updated>2019-08-07T08:32:27.559Z</updated>
  <id>https://inscode.github.io/</id>
  
  <author>
    <name>雨醉风尘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP foreach循环使用&amp;引用的小坑</title>
    <link href="https://inscode.github.io/2019/08/07/PHP-foreach%E5%BE%AA%E7%8E%AF%E4%BD%BF%E7%94%A8-%E5%BC%95%E7%94%A8%E7%9A%84%E5%B0%8F%E5%9D%91/"/>
    <id>https://inscode.github.io/2019/08/07/PHP-foreach循环使用-引用的小坑/</id>
    <published>2019-08-07T07:00:55.000Z</published>
    <updated>2019-08-07T08:32:27.559Z</updated>
    
    <content type="html"><![CDATA[<p>源起：今天有小🔥伴发了一段 <code>PHP</code> 代码问执行结果和常规逻辑思考🤔结果为啥么不一样。代码如下，当时只是说和 <code>foreach</code> 使用 <code>&amp;</code> 有关。也没深入思考到底是什么关系，午睡过后，心血来潮的想搞搞这个问题，故做如下记录。<a id="more"></a></p><p><strong>小伙伴给的原始代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    $arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$val) &#123;</span><br><span class="line">        <span class="comment">//四次循环迭代后依次输出 1, 2, 4, 8; 没任何毛病</span></span><br><span class="line">        <span class="keyword">echo</span> $val . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print_r($arr);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"************************"</span> . PHP_EOL;</span><br><span class="line">    <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $val) &#123;</span><br><span class="line">        print_r($arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> $val . PHP_EOL;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"###################"</span> . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//echo 依次打印的是： 1，2，4，4 [(O_O)]?</span></span><br></pre></td></tr></table></figure><p><strong>代码执行结果如下图</strong></p><!--![](./PHP-foreach循环使用-引用的小坑/PHP-foreach循环使用-引用的小坑.jpeg)--><img src="/2019/08/07/PHP-foreach循环使用-引用的小坑/PHP-foreach循环使用-引用的小坑.jpeg" title="PHP-foreach循环使用-引用的小坑1"><p>那么问题来了，第一次输出 <code>1，2，4，8</code> 没有任何问题。但是，但是，但是为什么第二次输出的是 <code>1, 2, 4, 4</code> 而不是 <code>1、2 4、8</code> 呢？查询 <a href="https://www.php.net/manual/zh/control-structures.foreach.php" target="_blank" rel="noopener">PHP foreach 文档</a> 有辣么一句特别提醒</p><h6 id="Warning-数组最后一个元素的-value-引用在-foreach-循环之后仍会保留。建议使用-unset-来将其销毁。"><a href="#Warning-数组最后一个元素的-value-引用在-foreach-循环之后仍会保留。建议使用-unset-来将其销毁。" class="headerlink" title="Warning 数组最后一个元素的 $value 引用在 foreach 循环之后仍会保留。建议使用 unset() 来将其销毁。"></a><code>Warning 数组最后一个元素的 $value 引用在 foreach 循环之后仍会保留。建议使用 unset() 来将其销毁。</code></h6><p>看此提示，冥冥之中好像知道了答案。</p><ul><li>第一次 <code>foreach</code> 由于使用的是 <code>&amp; 引用赋值</code>，在循环完成后如果没有 <code>unset($val)</code> 会保留最后一个元素的 <code>$val引用</code></li></ul><ul><li>第二次 <code>foreach</code> 由于使用的和第一次同样的迭代变量 <code>$val</code>,  数组的最后一个元素 <code>$arr[3]</code> 和当前循环迭代值 <code>$val</code> 指向同一个变量地址，此时 <code>$val</code> 值改变时 <code>$arr[3]</code> 的值也跟着改变了。</li></ul><p><strong>用上图说明</strong></p><ul><li><p>原始数组为图中 <code>A区域</code> 数组</p></li><li><p>第 <code>0</code> 次循环迭代：最后一个元素 <code>$arr[3]</code> 和 <code>$val 即($arr[0])</code> 值相同。<code>$arr[3] = $val = 1</code>，如图中 <code>0区域</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; 1</span><br><span class="line">    [1] =&gt; 2</span><br><span class="line">    [2] =&gt; 4</span><br><span class="line">    [3] =&gt; 1</span><br><span class="line">)</span><br><span class="line">第0次循环结果：1</span><br></pre></td></tr></table></figure></li><li><p>第 <code>1</code> 次循环迭代：最后一个元素 <code>$arr[3]</code> 和 <code>$val 即($arr[1])</code> 值相同。<code>$arr[3] = $val = 2</code>，如图中 <code>1区域</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; 1</span><br><span class="line">    [1] =&gt; 2</span><br><span class="line">    [2] =&gt; 4</span><br><span class="line">    [3] =&gt; 2</span><br><span class="line">)</span><br><span class="line">第1次循环结果：2</span><br></pre></td></tr></table></figure></li><li><p>第 <code>2</code> 次循环迭代：最后一个元素 <code>$arr[3]</code> 和 <code>$val 即($arr[2])</code> 值相同。<code>$arr[3] = $val = 4</code>，如图中 <code>2区域</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; 1</span><br><span class="line">    [1] =&gt; 2</span><br><span class="line">    [2] =&gt; 4</span><br><span class="line">    [3] =&gt; 4</span><br><span class="line">)</span><br><span class="line">第2次循环结果：4</span><br></pre></td></tr></table></figure></li><li><p>第 <code>3</code> 次循环迭代：最后一个元素 <code>$arr[3]</code> 和 <code>$val 即($arr[3])</code> 值相同。<code>$arr[3] = $val = 4</code>，如图中 <code>3区域</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; 1</span><br><span class="line">    [1] =&gt; 2</span><br><span class="line">    [2] =&gt; 4</span><br><span class="line">    [3] =&gt; 4</span><br><span class="line">)</span><br><span class="line">第2次循环结果：4</span><br></pre></td></tr></table></figure></li><li><p>综上，第二次循环 <code>1, 2, 4, 4</code> 就是这么来的 😜</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;源起：今天有小🔥伴发了一段 &lt;code&gt;PHP&lt;/code&gt; 代码问执行结果和常规逻辑思考🤔结果为啥么不一样。代码如下，当时只是说和 &lt;code&gt;foreach&lt;/code&gt; 使用 &lt;code&gt;&amp;amp;&lt;/code&gt; 有关。也没深入思考到底是什么关系，午睡过后，心血来潮的想搞搞这个问题，故做如下记录。
    
    </summary>
    
      <category term="PHP" scheme="https://inscode.github.io/categories/PHP/"/>
    
    
      <category term="编程" scheme="https://inscode.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="PHP" scheme="https://inscode.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>golang爬取百度贴吧内容</title>
    <link href="https://inscode.github.io/2019/08/04/golang%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%E5%86%85%E5%AE%B9/"/>
    <id>https://inscode.github.io/2019/08/04/golang爬取百度贴吧内容/</id>
    <published>2019-08-04T04:26:26.000Z</published>
    <updated>2019-08-04T15:51:57.487Z</updated>
    
    <content type="html"><![CDATA[<h5 id="爬虫实现步骤"><a href="#爬虫实现步骤" class="headerlink" title="爬虫实现步骤"></a>爬虫实现步骤</h5><p>1：获取需要爬取URL的地址（以 JavaScript吧 举例）</p><a id="more"></a><pre><code>http://tieba.baidu.com/f?kw=javascript&amp;ie=utf-8&amp;pn=0http://tieba.baidu.com/f?kw=javascript&amp;ie=utf-8&amp;pn=50http://tieba.baidu.com/f?kw=javascript&amp;ie=utf-8&amp;pn=150</code></pre><p>2：使用 http.Get(url) 获取到每一个URL的内容</p><p>3：将或得到URL的内容写入文件</p><p><strong>注意文件命名</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//贴吧的URL</span></span><br><span class="line"><span class="comment">//http://tieba.baidu.com/f?kw=javascript&amp;ie=utf-8&amp;pn=0</span></span><br><span class="line"><span class="comment">//http://tieba.baidu.com/f?kw=javascript&amp;ie=utf-8&amp;pn=50</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line">    <span class="comment">//确认起始页和终止页</span></span><br><span class="line">    <span class="keyword">var</span> startPage <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> endPage <span class="keyword">int</span></span><br><span class="line">    fmt.Print(<span class="string">"请输入起始页:"</span>)</span><br><span class="line">    fmt.Scanln(&amp;startPage)</span><br><span class="line">    <span class="keyword">if</span> startPage &lt;= <span class="number">1</span> &#123;</span><br><span class="line">        startPage = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Print(<span class="string">"请输入终止页:"</span>)</span><br><span class="line">    fmt.Scanln(&amp;endPage)</span><br><span class="line">    <span class="keyword">if</span> endPage &lt;= <span class="number">1</span> &#123;</span><br><span class="line">        endPage = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    working(startPage, endPage)</span><br><span class="line">    cost := time.Since(start)</span><br><span class="line">    fmt.Printf(<span class="string">"耗时 = [%s] "</span>, cost)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">working</span><span class="params">(startPage, endPage <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"正在爬取第%d页到%d页的信息...\n"</span>, startPage, endPage)</span><br><span class="line"></span><br><span class="line">    pageChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="comment">//循环爬取每一页</span></span><br><span class="line">    <span class="keyword">for</span> i := startPage; i &lt;= endPage; i++ &#123;</span><br><span class="line">        <span class="comment">//开启协程</span></span><br><span class="line">        <span class="keyword">go</span> SpiderPage(i, pageChan)</span><br><span class="line">        <span class="comment">//SpiderPage(i, pageChan)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := startPage; i &lt;= endPage; i++ &#123;</span><br><span class="line">        <span class="comment">//开启协程</span></span><br><span class="line">        fmt.Printf(<span class="string">"第 %d 页 爬取完成\n"</span>, &lt;-pageChan)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//爬取单个页面的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SpiderPage</span><span class="params">(i <span class="keyword">int</span>, pageChan <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    baseUrl := <span class="string">"http://tieba.baidu.com/f?kw=javascript&amp;ie=utf-8&amp;pn="</span> + strconv.Itoa((i<span class="number">-1</span>)*<span class="number">50</span>)</span><br><span class="line">    fmt.Println(<span class="string">"正在获取第"</span>, i, <span class="string">"页的内容"</span>)</span><br><span class="line">    result, err := httpGetUrl(baseUrl)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"http get error, Msg"</span>, err.Error())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将读取到的数据存储存储为文件</span></span><br><span class="line">    file, err := os.Create(<span class="string">"JavaScript_"</span> + strconv.Itoa(i) + <span class="string">".html"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != err &#123;</span><br><span class="line">        fmt.Println(<span class="string">"os Create err："</span>, err.Error())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    file.WriteString(result)</span><br><span class="line">    file.Close() <span class="comment">//保存好一个文件就关闭一个文件</span></span><br><span class="line">    pageChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//爬取内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpGetUrl</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(result <span class="keyword">string</span>, err error)</span></span> &#123;</span><br><span class="line">    resp, err1 := http.Get(url)</span><br><span class="line">    <span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">        err = err1</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数据</span></span><br><span class="line">    buffer := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">8196</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">//读取的内容至于buffer容器</span></span><br><span class="line">        n, err2 := resp.Body.Read(buffer)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"读取网页完成"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> err2 != <span class="literal">nil</span> &amp;&amp; err2 != io.EOF &#123;</span><br><span class="line">            err = err2</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//累次相加每一次读到的Buffer数据，存入result, 一次性返回</span></span><br><span class="line">        result += <span class="keyword">string</span>(buffer[:n])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;爬虫实现步骤&quot;&gt;&lt;a href=&quot;#爬虫实现步骤&quot; class=&quot;headerlink&quot; title=&quot;爬虫实现步骤&quot;&gt;&lt;/a&gt;爬虫实现步骤&lt;/h5&gt;&lt;p&gt;1：获取需要爬取URL的地址（以 JavaScript吧 举例）&lt;/p&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://inscode.github.io/categories/Golang/"/>
    
    
      <category term="爬虫" scheme="https://inscode.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Golang" scheme="https://inscode.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>程序员数学基础 之 矩阵</title>
    <link href="https://inscode.github.io/2019/08/03/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%9F%A9%E9%98%B5/"/>
    <id>https://inscode.github.io/2019/08/03/程序员数学之矩阵/</id>
    <published>2019-08-03T14:35:24.000Z</published>
    <updated>2019-08-03T16:15:48.836Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1：矩阵相加"><a href="#1：矩阵相加" class="headerlink" title="1：矩阵相加"></a>1：矩阵相加</h6><a id="more"></a><!--![](./程序员数学之矩阵/矩阵相加.jpg)--><img src="/2019/08/03/程序员数学之矩阵/矩阵相加.jpg" title="矩阵相加运算法则"><h6 id="2：矩阵相乘（不符合交换律）"><a href="#2：矩阵相乘（不符合交换律）" class="headerlink" title="2：矩阵相乘（不符合交换律）"></a>2：矩阵相乘（不符合交换律）</h6><ul><li><p>标量 * 矩阵</p><ul><li>变量 * 矩阵的每一个元素，得到一个新矩阵</li></ul></li><li><p>矩阵 * 矩阵</p><ul><li><p>用矩阵的 第1行 分别去 乘以 矩阵的每一列</p></li><li><p>用矩阵的 第N行 分别去 乘以 矩阵的每一列</p></li></ul></li></ul><!--![](./程序员数学之矩阵/矩阵乘上矩阵.jpg)--><img src="/2019/08/03/程序员数学之矩阵/矩阵乘上矩阵.jpg" title="矩阵乘上矩阵"><pre><code>- 矩阵A * 矩阵B != 矩阵B * 矩阵A</code></pre><ul><li>矩阵相乘的条件：前面矩阵的列数 等于 后面矩阵的行数</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;1：矩阵相加&quot;&gt;&lt;a href=&quot;#1：矩阵相加&quot; class=&quot;headerlink&quot; title=&quot;1：矩阵相加&quot;&gt;&lt;/a&gt;1：矩阵相加&lt;/h6&gt;
    
    </summary>
    
      <category term="数学" scheme="https://inscode.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="编程" scheme="https://inscode.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数学" scheme="https://inscode.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>test article</title>
    <link href="https://inscode.github.io/2019/08/02/post-test-deploy-hexo/"/>
    <id>https://inscode.github.io/2019/08/02/post-test-deploy-hexo/</id>
    <published>2019-08-02T11:10:54.000Z</published>
    <updated>2019-08-03T14:40:51.057Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Hexo-部署测试"><a href="#Hexo-部署测试" class="headerlink" title="Hexo 部署测试"></a>Hexo 部署测试</h4><h5 id="1：通过日志方式统计"><a href="#1：通过日志方式统计" class="headerlink" title="1：通过日志方式统计"></a>1：通过日志方式统计</h5><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents(<span class="string">"loc.log"</span>, microtime(<span class="keyword">true</span>).<span class="string">'_end'</span>.<span class="string">"-----$lat@2"</span>.PHP_EOL, FILE_APPEND);</span><br><span class="line"></span><br><span class="line">file_put_contents(<span class="string">'exelog/'</span>.time().<span class="string">'.log'</span>, var_export(Yii::$app-&gt;request-&gt;post(), <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$postdata = file_get_contents(<span class="string">"php://input"</span>);</span><br><span class="line">$postdata = json_decode($postdata,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h5 id="2：二维数组指定字段排序"><a href="#2：二维数组指定字段排序" class="headerlink" title="2：二维数组指定字段排序"></a>2：二维数组指定字段排序</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array_multisort (array_column($citiesMddBaseInfo, ‘hot’), SORT_DESC, $citiesMddBaseInfo);</span><br><span class="line"></span><br><span class="line">array_multisort(array_column($hotelList, <span class="string">'price'</span>), SORT_ASC, $hotelList);</span><br><span class="line"></span><br><span class="line">array_multisort($hotelList,SORT_ASC, array_column($hotelList, <span class="string">'price'</span>));</span><br></pre></td></tr></table></figure><!--![](./post-test-deploy-hexo/smell.jpg)--><img src="/2019/08/02/post-test-deploy-hexo/smell.jpg" title="这是一张测试图片">]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Hexo-部署测试&quot;&gt;&lt;a href=&quot;#Hexo-部署测试&quot; class=&quot;headerlink&quot; title=&quot;Hexo 部署测试&quot;&gt;&lt;/a&gt;Hexo 部署测试&lt;/h4&gt;&lt;h5 id=&quot;1：通过日志方式统计&quot;&gt;&lt;a href=&quot;#1：通过日志方式统计&quot; class=&quot;headerlink&quot; title=&quot;1：通过日志方式统计&quot;&gt;&lt;/a&gt;1：通过日志方式统计&lt;/h5&gt;
    
    </summary>
    
      <category term="测试" scheme="https://inscode.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="PHP" scheme="https://inscode.github.io/tags/PHP/"/>
    
      <category term="Hexo" scheme="https://inscode.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
