<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MySQL性能优化之Explain浅析实例]]></title>
    <url>%2F2019%2F08%2F24%2FMySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BExplain%E6%B5%85%E6%9E%90%E5%AE%9E%E4%BE%8B%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL性能优化之Explain浅析（下）]]></title>
    <url>%2F2019%2F08%2F20%2FMySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BExplain%E6%B5%85%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[写在前面: 接上篇 MySQL性能优化之Explain浅析（上）。 1: explain 的使用及其字段说明12345678-- 得到的执行计划如下表mysql&gt; explain select * from employees;+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+| 1 | SIMPLE | employees | NULL | ALL | NULL | NULL | NULL | NULL | 107 | 100.00 | NULL |+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+1 row in set, 1 warning (0.01 sec) 1.1: possible_keys 字段含义或用途: 显示可能应用到这张表中的一个或多个索引。查询涉及到的字段上若存在索引，则该索引列被列出，但是该索引列不一定被实际使用。 1.2: keys 字段含义或用途: 实际使用的索引。如果为Null，则没有使用索引。若查询中使用了覆盖索引，则该索引仅出现在 key 列中。 123456mysql&gt; explain select department_id,location_id from departments;+----+-------------+-------------+------------+-------+---------------+-----------+---------+------+------+----------+-------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-------------+------------+-------+---------------+-----------+---------+------+------+----------+-------------+| 1 | SIMPLE | departments | NULL | index | NULL | loc_id_fk | 5 | NULL | 27 | 100.00 | Using index |+----+-------------+-------------+------------+-------+---------------+-----------+---------+------+------+----------+-------------+ 1.3: key_len 字段含义或用途: 表示索引中实际用到的字节数，可通过该列计算查询中使用的索引长度。在不损失精度的情况下，长度越短越好。key_len 显示的值为索引字段的最大可能长度，并非实际使用长度，即 key_len 是根据表定义计算而得，不是通过表内检索而得。 1234567891011121314151617-- 一个查询条件mysql&gt; explain select * from employees where job_id="IT_PROG";+----+-------------+-----------+------------+------+---------------+-----------+---------+-------+------+----------+-------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-----------+------------+------+---------------+-----------+---------+-------+------+----------+-------+| 1 | SIMPLE | employees | NULL | ref | job_id_fk | job_id_fk | 23 | const | 5 | 100.00 | NULL |+----+-------------+-----------+------------+------+---------------+-----------+---------+-------+------+----------+-------+1 row in set, 1 warning (0.02 sec)-- 两个查询条件mysql&gt; explain select * from employees where job_id="IT_PROG" and employee_id&gt;100;+----+-------------+-----------+------------+-------+-------------------+-----------+---------+------+------+----------+-----------------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-----------+------------+-------+-------------------+-----------+---------+------+------+----------+-----------------------+| 1 | SIMPLE | employees | NULL | range | PRIMARY,job_id_fk | job_id_fk | 27 | NULL | 5 | 100.00 | Using index condition |+----+-------------+-----------+------------+-------+-------------------+-----------+---------+------+------+----------+-----------------------+1 row in set, 1 warning (0.01 sec) 1.4: ref 字段含义或用途: 显示索引的那一列被使用了，如果可能的话，是一个常数， 12345678-- employees.job_id='AC_MGR'解析为一个常量constmysql&gt; explain select * from employees,departments where employees.department_id = departments.department_id and employees.job_id='AC_MGR';+----+-------------+-------------+------------+--------+----------------------+-----------+---------+-------------------------------------+------+----------+-------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-------------+------------+--------+----------------------+-----------+---------+-------------------------------------+------+----------+-------------+| 1 | SIMPLE | employees | NULL | ref | dept_id_fk,job_id_fk | job_id_fk | 23 | const | 1 | 100.00 | Using where || 1 | SIMPLE | departments | NULL | eq_ref | PRIMARY | PRIMARY | 4 | myemployees.employees.department_id | 1 | 100.00 | NULL |+----+-------------+-------------+------------+--------+----------------------+-----------+---------+-------------------------------------+------+----------+-------------+ 1.5: rows 字段含义或用途: 每张表有多少行被优化器查询（值越少越好）。此数字是估算值，可能并不总是准确的 1.6: Extra 字段 Using filesort: 说明 MySQL 会对数据使用一个 外部的索引排序，而不是按照表内的索引顺序进行读取。MySQL 中无法利用索引完成的排序称之为 文件排序。出现时表示需要优化了 12345678910111213141516171819202122232425mysql&gt; show index from apps;+-------+------------+--------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |+-------+------------+--------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+| apps | 0 | PRIMARY | 1 | id | A | 5 | NULL | NULL | | BTREE | | || apps | 1 | idx_url_country_language | 1 | url | A | 5 | NULL | NULL | | BTREE | | || apps | 1 | idx_url_country_language | 2 | country | A | 5 | NULL | NULL | | BTREE | | || apps | 1 | idx_url_country_language | 3 | language | A | 5 | NULL | NULL | | BTREE | | |+-------+------------+--------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+4 rows in set (0.00 sec)-- 组合索引是 idx_url_country_language， 下面的SQL 中间隔了组合索引的 country 字段mysql&gt; explain select * from apps where url="https://golang.org" order by language;+----+-------------+-------+------------+------+--------------------------+--------------------------+---------+-------+------+----------+---------------------------------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-------+------------+------+--------------------------+--------------------------+---------+-------+------+----------+---------------------------------------+| 1 | SIMPLE | apps | NULL | ref | idx_url_country_language | idx_url_country_language | 767 | const | 1 | 100.00 | Using index condition; Using filesort |+----+-------------+-------+------------+------+--------------------------+--------------------------+---------+-------+------+----------+---------------------------------------+mysql&gt; explain select * from apps where url="https://golang.org" order by country,language;+----+-------------+-------+------------+------+--------------------------+--------------------------+---------+-------+------+----------+-----------------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-------+------------+------+--------------------------+--------------------------+---------+-------+------+----------+-----------------------+| 1 | SIMPLE | apps | NULL | ref | idx_url_country_language | idx_url_country_language | 767 | const | 1 | 100.00 | Using index condition |+----+-------------+-------+------------+------+--------------------------+--------------------------+---------+-------+------+----------+-----------------------+ Using temporary: 使用临时表保存中间查询结果，MySQL 在对结果排序时使用临时表，常见于排序 order by 和 分组查询 group by。出现时表示 急需优化 了 123456mysql&gt; explain select country from apps group by country;+----+-------------+-------+------------+-------+--------------------------+--------------------------+---------+------+------+----------+----------------------------------------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-------+------------+-------+--------------------------+--------------------------+---------+------+------+----------+----------------------------------------------+| 1 | SIMPLE | apps | NULL | index | idx_url_country_language | idx_url_country_language | 895 | NULL | 5 | 100.00 | Using index; Using temporary; Using filesort |+----+-------------+-------+------------+-------+--------------------------+--------------------------+---------+------+------+----------+----------------------------------------------+ Using index: 表示相应的 select 操作使用了覆盖索引（Covering index）,避免访问表的数据行，效率还阔以。如果还同时出现了 using where，表明索引还被用来执行索引值的查找。如果没有同时出现 using where，表明索引只是用来读取数据而非执行查询操作。 123456mysql&gt; explain select employee_id from employees where employee_id order by employee_id;+----+-------------+-----------+------------+-------+---------------+---------+---------+------+------+----------+--------------------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-----------+------------+-------+---------------+---------+---------+------+------+----------+--------------------------+| 1 | SIMPLE | employees | NULL | index | NULL | PRIMARY | 4 | NULL | 107 | 90.00 | Using where; Using index |+----+-------------+-----------+------------+-------+---------------+---------+---------+------+------+----------+--------------------------+ 覆盖索引：MySQL 可以利用索引返回 `select` 查询的字段，而不必根据索引再次去读取数据文件。也就是说查询的列是索引的一部分，那么查询就只在索引上进行。 using join buffer: 使用了连接缓存 impossible where: where 字句的值总是 false，不能用来获取任何元祖 123456mysql&gt; explain select * from employees where employee_id= 1 and employee_id=2;+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+| 1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | Impossible WHERE |+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL性能优化之Explain浅析（上）]]></title>
    <url>%2F2019%2F08%2F19%2FMySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BExplain%E6%B5%85%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89%2F</url>
    <content type="text"><![CDATA[写在前面: 在软件开发中，遵循着 first finish then perfect 的原则。前期我们往往会更加关注程序功能的实现，编写的 SQL 语句也多为满足业务所需的增删改查。如果运气还不错，业务做起来了，数据量达到一定量级时，我们发现一个请求的响应时间会越来越难以接受，其中某些不再合理的 SQL 往往会成为整个请求响应中性能消耗大户，甚至成为性能瓶颈，那么此时对 SQL 语句的优化就显得格外重要了。要优化 SQL 就需要定位 SQL 存在的问题。MySQL 提供了 explain + sql 命令来获取 SQL 语句执行计划的信息，包括有关如何连接表以及以何种顺序连接表。以下为 explain 学习中所做笔记，记录于此📝以便今后翻阅。 鉴于篇幅: 这里记录截至 explain 中 type 前的字段 备注: 文中用到的sql数据来自 employees.sql 1: explain 能获取到那些信息？ 表的读取顺序 表数据读取操作（select）的类型 那些所有阔以被使用 那些索引实际被使用 表之间的引用 每张表有多少行被优化器查询 2: explain 的使用及其字段说明12345678-- 得到的执行计划如下表mysql&gt; explain select * from employees;+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+| 1 | SIMPLE | employees | NULL | ALL | NULL | NULL | NULL | NULL | 107 | 100.00 | NULL |+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------+1 row in set, 1 warning (0.01 sec) 2.1: id 字段含义或用途: select 查询的序列号，包含一组数字，表示查询中执行 select 字句或是操作表的顺序 id 的三种情形 id 相同，执行顺序自上而下 123456789101112-- 查询员工名，部门名mysql&gt; explain SELECT employees.employee_id,employees.last_name, departments.department_name -&gt; from employees -&gt; inner join departments -&gt; on employees.department_id = departments.department_id;+----+-------------+-------------+------------+------+---------------+------------+---------+---------------------------------------+------+----------+-------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-------------+------------+------+---------------+------------+---------+---------------------------------------+------+----------+-------+| 1 | SIMPLE | departments | NULL | ALL | PRIMARY | NULL | NULL | NULL | 27 | 100.00 | NULL || 1 | SIMPLE | employees | NULL | ref | dept_id_fk | dept_id_fk | 5 | myemployees.departments.department_id | 9 | 100.00 | NULL |+----+-------------+-------------+------------+------+---------------+------------+---------+---------------------------------------+------+----------+-------+2 rows in set, 1 warning (0.00 sec) 说明: 表读取顺序是先 departments 后 departments。 id 不同，如果是子查询，id 的序号会递增，id 值越大其优先级越高，就越先被执行。 123456789mysql&gt; explain select * from employees where salary = (select max(salary) from employees);+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+| 1 | PRIMARY | employees | NULL | ALL | NULL | NULL | NULL | NULL | 107 | 10.00 | Using where || 2 | SUBQUERY | employees | NULL | ALL | NULL | NULL | NULL | NULL | 107 | 100.00 | NULL |+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+2 rows in set, 1 warning (0.00 sec) 说明: 表执行顺序是先执行 id 为 2 的子查询后执行 id 为 1 的主查询。 id 相同不同，同时存在（❓这是什么鬼👻） 123456789mysql&gt; 没找到例子，下面就只表示一下了😂😂😂(只关注 id 就行)+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+| 1 | PRIMARY | employees | NULL | ALL | NULL | NULL | NULL | NULL | 107 | 10.00 | Using where || 1 | PRIMARY | employees | NULL | ALL | NULL | NULL | NULL | NULL | 107 | 100.00 | NULL || 2 | SUBQUERY | employees | NULL | ALL | NULL | NULL | NULL | NULL | 107 | 100.00 | NULL |+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+2 rows in set, 1 warning (0.00 sec) 说明: id 字段中数字大的先执行，即是 2先执行，然后存在两个评价的 1，按 自上而下的先后顺序执行。 2.2: select_type 字段含义或用途: 表示 SELECT 的类型，主要用于区别 普通查询、联合查询、子查询等复杂查询。常见的取值如下 1-SIMPLE: 简单 select 查询，不包含子查询或者连接查询（union） 2-PRIMARY: 主查询，即是外层的查询（查询中包含了子查询），PRIMARY 是最后加载的查询 3-SUBQUERY: 在 SELECT 或 where 查询包含了 子查询 4-DERIVED: 在 From 列表中包含的子查询被标记为 DEVIRED(衍生)。MySQL会递归执行这些子查询，把结果放在临时表中（会增加系统消耗） 5-UNION: 若第二个 SELECT 出现在 UNION 之后，则标记为 UNION; 若 UNION 包含在 FROM 字句的子查询中，外层的 SELECT 被标记 DEVIRED 6-UNION RESULT: 两种 UNION 结果的合并 123456789mysql&gt; explain select * from employees where email like '%a%' union select * from employees where department_id&gt;90;+----+--------------+------------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+-----+--------------+------------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+| 1 | PRIMARY | employees | NULL | ALL | NULL | NULL | NULL | NULL | 107 | 11.11 | Using where || 2 | UNION | employees | NULL | range | dept_id_fk | dept_id_fk | 5 | NULL | 8 | 100.00 | Using index condition || NULL| UNION RESULT | &lt;union1,2&gt; | NULL | ALL | NULL | NULL | NULL | NULL | NULL | NULL | Using temporary |+----+--------------+------------+------------+-------+---------------+------------+---------+------+------+----------+-----------------------+3 rows in set, 1 warning (0.00 sec) 2.3: table 字段含义或用途: 输出结果集的表 2.4: type 字段含义或用途: 显示查询使用了何种连接类型。结果值从最好到最坏依次如下，通常来说保证 type 值能达到 Range。 system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all 1-system: 单表只有一行记录（等于系统表），是const连接类型的特例。可以忽略不计 2-const: 该表最多只有一个匹配行，在查询开头读取。因为只有一行，所以优化器的其余部分可以将此行中列的值视为常量。const表非常快，因为它们只读一次。const 将 PRIMARY KEY或 UNIQUE索引的所有部分与常量值进行比较时使用。 1234567-- 主键 employee_id = 100 是一个常量，对应一条记录， type 为 constmysql&gt; explain select * from (select * from employees where employee_id = 100) as tmp;+----+-------------+-----------+------------+-------+---------------+---------+---------+-------+------+----------+-------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-----------+------------+-------+---------------+---------+---------+-------+------+----------+-------+| 1 | SIMPLE | employees | NULL | const | PRIMARY | PRIMARY | 4 | const | 1 | 100.00 | NULL |+----+-------------+-----------+------------+-------+---------------+---------+---------+-------+------+----------+-------+ 3-eq_ref: 唯一性索引（PRIMARY KEY 或 UNIQUE NOT NULL）扫描，对于每个索引键，表中只有一个记录与之匹配。常见于主键或唯一索引 12345678-- job_id='AC_MGR' 在employees表中只有一条记录;mysql&gt; explain select * from employees,departments where employees.job_id='AC_MGR' and departments.department_id = employees.department_id;+----+-------------+-------------+------------+--------+----------------------+-----------+---------+-------------------------------------+------+----------+-------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-------------+------------+--------+----------------------+-----------+---------+-------------------------------------+------+----------+-------------+| 1 | SIMPLE | employees | NULL | ref | dept_id_fk,job_id_fk | job_id_fk | 23 | const | 1 | 100.00 | Using where || 1 | SIMPLE | departments | NULL | eq_ref | PRIMARY | PRIMARY | 4 | myemployees.employees.department_id | 1 | 100.00 | NULL |+----+-------------+-------------+------------+--------+----------------------+-----------+---------+-------------------------------------+------+----------+-------------+ 4-ref: 非唯一性索引扫描, 返回匹配某个单独值的所有行记录。 1234567-- job_id 是一个索引，配置job_id = 'SA_REP' 的所有记录mysql&gt; explain select * from employees where job_id='SA_REP';+----+-------------+-----------+------------+------+---------------+-----------+---------+-------+------+----------+-------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-----------+------------+------+---------------+-----------+---------+-------+------+----------+-------+| 1 | SIMPLE | employees | NULL | ref | job_id_fk | job_id_fk | 23 | const | 30 | 100.00 | NULL |+----+-------------+-----------+------------+------+---------------+-----------+---------+-------+------+----------+-------+ 5-range: 索引仅检索给定范围内的行，使用索引选择行 1234567-- 使用 =， &lt;&gt;， &gt;， &gt;=， &lt;， &lt;=， IS NULL， &lt;=&gt;， BETWEEN， LIKE，或 IN()运算符mysql&gt; explain select * from employees where employee_id&gt;100;+----+-------------+-----------+------------+-------+---------------+---------+---------+------+------+----------+-------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-----------+------------+-------+---------------+---------+---------+------+------+----------+-------------+| 1 | SIMPLE | employees | NULL | range | PRIMARY | PRIMARY | 4 | NULL | 106 | 100.00 | Using where |+----+-------------+-----------+------------+-------+---------------+---------+---------+------+------+----------+-------------+ 6-index: index 与 all 的区别为 index 类型只遍历索引数🌲，所以比 all 快。因为索引文件通常比数据文件小，虽然两者都是扫描全表，但是 index 从索引中读取，而 all 是从硬盘中读取。 123456789101112131415161718192021222324-- 查看表 departments 的索引情况mysql&gt; show index from departments;+-------------+------------+-----------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |+-------------+------------+-----------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+| departments | 0 | PRIMARY | 1 | department_id | A | 27 | NULL | NULL | | BTREE | | || departments | 1 | loc_id_fk | 1 | location_id | A | 7 | NULL | NULL | YES | BTREE | | |+-------------+------------+-----------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+-- 覆盖索引mysql&gt; explain select department_id, location_id from departments;+----+-------------+-------------+------------+-------+---------------+-----------+---------+------+------+----------+-------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-------------+------------+-------+---------------+-----------+---------+------+------+----------+-------------+| 1 | SIMPLE | departments | NULL | index | NULL | loc_id_fk | 5 | NULL | 27 | 100.00 | Using index |+----+-------------+-------------+------------+-------+---------------+-----------+---------+------+------+----------+-------------+-- manager_id不是索引字段mysql&gt; explain select department_id, location_id, manager_id from departments;+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-------+| 1 | SIMPLE | departments | NULL | ALL | NULL | NULL | NULL | NULL | 27 | 100.00 | NULL |+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-------+ 1explain select * from employees where salary=&apos;20000&apos;; 未完待续]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数学思维修炼一: 数据的表示]]></title>
    <url>%2F2019%2F08%2F18%2F%E6%95%B0%E5%AD%A6%E6%80%9D%E7%BB%B4%E4%BF%AE%E7%82%BC%E4%B8%80-%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[写在前面: 以下为书籍📚 《程序员的数学思维修炼》 第1章 &lt;数据的表示&gt; 读书记录。 1: 8 和 8.0 相等吗？含义相同吗？ 从数值大小比较来说，8.0 和 8 是相等的。 在近似数的表示中，数字 8 表示数据值精确到个位，如 7.9、8.2 等数精确到个位都表示为 8。而 8.0 则表示数据精确到十分位（小数点后一位），如 8.02、7.99 等精确到十分位都表示为 8.0。因此从这个角度看两者是不同的 ps: 看问题得分场景❓❓❓ 2: 进制的表示2.1: 二人类为什么习惯十进制？ 人类最开始计数时，首先想到的是用 数手指 的方式来计数，满 10 个以后再借一双手，这种 便捷性 使得人类习惯于使用十进制。 十进制对比其他进制（如二进制）更简洁，更易识别。 2.2: 计算机为什么要使用二进制？ 如果计算机使用 十进制，那么需要让电脑能识别 十进制 中的十个数字。假设最高电压是 12V，那么10个数字中每个数码（0~9）分配到的电压区间是 12 / 9 ≈ 1.3(v)。这样导致数码之间的电压间隔小，如果外界干扰造成电压大幅变化，数据标识就不太准确了。另外最大的问题是硬件上要标识十种状态的话，其电路构造的复杂度就非常复杂了 二进制的技术实现比较简单。逻辑电路通常就只有两种状态 [开 or 关] 运算规则简单，利于简化计算机内部结构，提高运算速度 适合于逻辑运算 二进制易于和别的进制进行转换 抗干扰能力强👍。因为每位数码只有高低两种状态，当受到一定程度的干扰时，仍能可靠的分辨出是 高电平还是 低电平 2.3: 二进制的运算 加法 12340 + 0 = 00 + 1 = 11 + 0 = 11 + 1 = 10(逢2进1) 减法 12340 - 0 = 00 - 1 = 1（借1当2）1 - 0 = 11 - 1 = 0 乘法 12340 * 0 = 00 * 1 = 01 * 0 = 01 * 1 = 1 除法 12340 / 0 (无意义)0 / 1 = 01 / 0 (无意义)1 / 1 = 1]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL 索引那些事儿一]]></title>
    <url>%2F2019%2F08%2F17%2FMySQL-%E7%B4%A2%E5%BC%95%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%2F</url>
    <content type="text"><![CDATA[索引定义: 索引是帮助 MySQL 高效获取数据的 数据结构（官方）。简单理解就是 排好序的快速查找数据结构。 在数据库系统中，除了保存数据之外，数据库系统还维护着 满足特定查找算法 的 数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就成为索引。 通常来说索引本身也是会占用很大的存储空间，不可能全部存储在内存中。因此索引往往以索引文件形式存储在磁盘上。 一: 索引优缺点 优点: 类似于书籍的目录索引，提高了数据检索的效率，降低数据库 IO 成本 通过索引列对数据进行排序，降低数据排序的成本，从而降低 CPU 计算的消耗 缺点: 实际上 索引也是一张表，该表保留了主键和索引字段，并指向实体表的记录。 索引虽然提高了查询速度，但同时也降低了更新表的速度，如当对表进行 insert, update, delete 操作时。因为更新表时，需要重建索引。 二: 索引分类 单值索引: 一个索引值包含一个列，一个表可以有多个单列索引 唯一索引: 索引列的值必须唯一，单允许空值 复合索引: 一个索引包含多个列 三: 索引创建、删除及查看 创建 create [unique] index indexName on tableName(colName(length)) alter table tableName add [unique] index indexName(colName1, ... , colNameN) 删除 Drop index indexName on tableName 查看 show index from taleName 四: 索引的使用场景 使用索引 1: 主键自动建立唯一索引 2: 频繁作为查询条件的字段应该建立索引 3: 查询中已其他表关联的字段，外键关系建立索引 4: 频繁更新的不适合建立索引 5: 查询中排序的字段建立索引可提高排序速度 6: 查询中统计或者分组字段 不使用索引 1: 表记录太少 2: 经常增删改的字段 3: 数据重复且分布平均的表字段（如性别），这种场景下建立索引没有任何效果。 索引的选择性 是指索引列中的不同值的数目与表中记录数的比。如果一个表有 2000 条记录，表索引列有 1980 个不同的值。索引的选择性为 1980 / 2000 = 0.99；索引的选择性越接近1，这个索引的效率越高。 五: B Tree 检索原理 【初始化介绍】 这是一个 B+树🌲 , 绿色的色块是一个个的磁盘块，每个磁盘块包括几个数据项（蓝色色块）和指针（橙色色块）。如磁盘块1包含数据项 17 和 35，包含指针 P1,P2,P3。P1指向小于17的磁盘块，P2指向17和35之间的磁盘块，P3表示大于35的磁盘块。 真实的数据存在于叶子🍃节点，即是 3, 5, 9, 10, 13, 15, 28, 29, 36, 60, 75, 79, 90, 99 非叶子节点不存储真实的数据，只存储指向搜索方向的数据项 【查找过程，以数字29举例】 1: 首先把磁盘块1由磁盘加载到内存中，此时发生 第一次IO，在内存中使用二分查找确定29在17和35之间，从而确定使用磁盘块1的P2指针。 2: 由于P2指向磁盘块3，此时将磁盘块3由磁盘加载至内存中，发生 第二次IO。 3: 29在26和30之间，从而确定使用磁盘块3的P2指针，通过指针加载磁盘块8到内存中，发生 第三次IO，同时内存中使用二分查找找到29。 Q1: 为什么数据表记录的删除多使用软删除？ 保留数据记录，为了数据分析 为了保留原来原来索引，原因删除元素需要重建索引]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL架构体系及SQL查询执行流程初探]]></title>
    <url>%2F2019%2F08%2F17%2FMySQL%E6%9E%B6%E6%9E%84%E4%BD%93%E7%B3%BB%E5%8F%8ASQL%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%88%9D%E6%8E%A2%2F</url>
    <content type="text"><![CDATA[简述: 自工作以来，大部分的时间接触的关系型都是 MySQL 数据库系统，但使用都比较浅显基础(CRUD)。最近打算重新深入学习下 MySQL，安装的版本是 5.7.21，学习记录于此，便日后温习查看。 首先来看看 MySQL 的架构图，然后依次来看看每一部分是做什么的。 1：Client连接器（Connectors），也就是通常所说的 MySQL 客户端。不同的编程语言提供了对应的 API 与 MySQL 服务系统进行交互通讯。 通过 show variables like &#39;%connection%; 来查看 MySQl 服务器的连接信息。默认最大连接数是151。 123456789mysql&gt; show variables like &apos;%connection%&apos;;+--------------------------+-----------------+| Variable_name | Value |+--------------------------+-----------------+| character_set_connection | utf8 || collation_connection | utf8_general_ci || max_connections | 151 || max_user_connections | 0 |+--------------------------+-----------------+ 2：MySQL ServerServer 层是 MySQL 提供服务的核心。主要分为以下几个模块（查询缓存 MySQL8.0 版本被删除，故此不做记录📝） 2.1：Connection Pool（连接池）连接池主要实现以下功能 2.1.1：Authentication（进行身份验证）**terminal 下连接命令如下 mysql -u root -h localhost - p。如果用户名密码认证通过，连接器会到 权限表 里面查出用户拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。 一旦一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。 连接完成后如果没有使用，该连接就处于 Sleep 状态。如果超过 MySQL 服务器配置的 wait_time 值，可通过 show variables like &#39;%wait%&#39;; 查看该值，默认是 28800 秒，该连接就会被回收，使用时就需要重新建立连接了。 如果客户端持续有请求，则一直使用同一个连接，则称该连接为长连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。由于建立连接比较复杂，应当减少连接的操作而使用长连接。但是过多使用长连接会使得内存飙升（因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放）导致 MySQL 异常重启。 解决方案1 ：定期断开长连接。使用一段时间后或者程序里面判断执行过一个占用内存的大查询后，定期断开连接，之后要查询时再重新建立连接； 解决方案2 ：对于 MySQL 5.7 及后续版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。 2.1.2：Thread Reuse（线程重用）2.1.3：Connection Limits（连接限制)2.1.4：Check Memory (内存检测)2.1.5：缓存每个客户端连接都会在服务器进程中拥有一个线程，这个连接的查询只会在这个单独的线程中执行，该线程只能轮流在某个 cpu 上运行，服务器会负责缓存线程。因此，不需要为每一个新建的连接创建或销毁线程，或者直接使用线程池功能，来维护大量的可用连接。 2.2：SQL Interface（SQL 接口）用于执行 DML, DDL, 存储过程, 视图, 触发器等。接收客户端发来的sql请求查询，并返回需要查询的结构。 2.3：Parser（解析器）解析器通过关键字将SQL语句进行解析（词法分析 + 预发分析），并生成对应的数据结构（解析树）。然后对其进行各种优化，包括重写查询，决定查询的读写顺序，以及选择须使用的索引等。MySQL解析器将使用MySQL语法规则验证和解析查询。 预处理器则根据一些MySQL规则进行进一步检查解析书是否合法，例如检查数据表和数据列是否存在，还会解析名字和别名，看看它们是否有歧义。 2.4：Optimizer（优化器）优化器会将 解析树 转化成 执行计划。一条查询可以有多种执行方法，最后都是返回相同结果。优化器的作用就是 找到这其中最好的执行计划。生成执行计划的过程会消耗较多的时间，特别是存在许多可选的执行计划时。 如果在一条SQL语句执行的过程中将该语句对应的最终执行计划进行缓存，当相似的语句再次被输入服务器时，就可以直接使用已缓存的执行计划，从而跳过SQL语句生成执行计划的整个过程，进而可以提高语句的执行速度。 eg：怎么使用索引，怎么处理表的 Join 优化器处理 解析器，预处理器，优化器处理流程 如下图 图片引用自 程序员历小冰 2.5：Executor（执行器）根据 优化器 的执行计划去调用存储引擎 API 接口获取数据 3：Management Serveices &amp; Utilities（系统管理和控制工具）备份，安全恢复，复制，集群，管理，配置，迁移和元数据。 4：Pluggable Storage Engines（可插拔的存储引擎） 存储引擎针对数据表 5：文件系统，文件，日志补充: 一条 SQL 查询语句各个关键字解析的顺序过程 写着写着发现提及很多知识点还是未知，路漫漫其修远兮，需要学的东西还多，愿每日都比昨日进步，即使进步很微小。那先吃饭去了🍚 todo 数据库实例了解 参考 MySQL实战45讲 一条SQL语句在MySQL中是如何执行的 本来以为mysql即将消亡，没想到它却越来越强大 MySQL体系架构 mysql体系架构图以及二进制安装mariadb MySQL中的实例、数据库关系简介]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL 5.7.21-1配置文件my.cnf]]></title>
    <url>%2F2019%2F08%2F15%2FMySQL-5-7-21-1%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6my-cnf%2F</url>
    <content type="text"><![CDATA[简述：MySQL 5.7.21-1 原始配置文件 my.cnf，为以后查询方便特此记录 MySQL 安装后的一些注意点 1：安装后先设置字符编码。如果一个库（eg:DB1）在使用期间改变了 my.cnf 的字符编码配置，此时 DB1 的原有的字符串编码不受影响，如果再新建一个 DB2 库，则 DB2 使用心得字符编码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112## The MySQL database server configuration file.## You can copy this to one of:# - "/etc/mysql/my.cnf" to set global options,# - "~/.my.cnf" to set user-specific options.## One can use all long options that the program supports.# Run program with --help to get a list of available options and with# --print-defaults to see which it would actually understand and use.## For explanations see# http://dev.mysql.com/doc/mysql/en/server-system-variables.html# This will be passed to all mysql clients# It has been reported that passwords should be enclosed with ticks/quotes# escpecially if they contain "#" chars...# Remember to edit /etc/mysql/debian.cnf when changing the socket location.# Here is entries for some specific programs# The following values assume you have at least 32M ram[mysqld_safe]socket = /var/run/mysqld/mysqld.socknice = 0[mysqld]## * Basic Settings#user = mysqlpid-file = /var/run/mysqld/mysqld.pidsocket = /var/run/mysqld/mysqld.sockport = 3306basedir = /usrdatadir = /var/lib/mysqltmpdir = /tmplc-messages-dir = /usr/share/mysql# set server charactercharacter-set-server = utf8collation-server = utf8_general_ciinit_connect = 'SET NAMES utf8'skip-external-locking## Instead of skip-networking the default is now to listen only on# localhost which is more compatible and is not less secure.bind-address = 127.0.0.1## * Fine Tuning#key_buffer_size = 16Mmax_allowed_packet = 16Mthread_stack = 192Kthread_cache_size = 8# This replaces the startup script and checks MyISAM tables if needed# the first time they are touchedmyisam-recover-options = BACKUP#max_connections = 100#table_open_cache = 64#thread_concurrency = 10## * Query Cache Configuration#query_cache_limit = 1Mquery_cache_size = 16M## * Logging and Replication## Both location gets rotated by the cronjob.# Be aware that this log type is a performance killer.# As of 5.1 you can enable the log at runtime!#general_log_file = /var/log/mysql/mysql.log#general_log = 1## Error log - should be very few entries.#log_error = /var/log/mysql/error.log## Here you can see queries with especially long duration#slow_query_log = 1#slow_query_log_file = /var/log/mysql/mysql-slow.log#long_query_time = 2#log-queries-not-using-indexes## The following can be used as easy to replay backup logs or for replication.# note: if you are setting up a replication slave, see README.Debian about# other settings you may need to change.#server-id = 1#log_bin = /var/log/mysql/mysql-bin.logexpire_logs_days = 10max_binlog_size = 100M#binlog_do_db = include_database_name#binlog_ignore_db = include_database_name## * InnoDB## InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.# Read the manual for more InnoDB related options. There are many!## * Security Features## Read the manual, too, if you want chroot!# 数据文件的存放路径【每一个数据库是目录】# chroot = /var/lib/mysql/## For generating SSL certificates I recommend the OpenSSL GUI "tinyca".## ssl-ca=/etc/mysql/cacert.pem# ssl-cert=/etc/mysql/server-cert.pem# ssl-key=/etc/mysql/server-key.pem]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang爬虫系列三：下载去哪儿游记图片到本地]]></title>
    <url>%2F2019%2F08%2F14%2FGolang%E4%B8%8B%E8%BD%BD%E5%8E%BB%E5%93%AA%E5%84%BF%E6%B8%B8%E8%AE%B0%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0%2F</url>
    <content type="text"><![CDATA[声明：以下内容仅供技术学习简述： 获取去哪儿网 中的的游记（eg: 美在“十二背后” ）页面中的图片地址并将图片保存到本地 步骤如下1: 使用正则获取图片的链接并存储到一个 slice 中 2: 遍历 slice 中的 图片地址，读取数据保存到本地 代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116package mainimport ( "fmt" "strconv" "net/http" "io" "regexp" "os")func main() &#123; var articleId int fmt.Print("请输入游记id: ") fmt.Scan(&amp;articleId) spiderArticleImageUrls(articleId)&#125;func spiderArticleImageUrls(articleId int) &#123; //https://travel.qunar.com/youji/5908435 articleUrl := "https://travel.qunar.com/youji/" + strconv.Itoa(articleId) resp, err1 := http.Get(articleUrl) //fmt.Println(resp.StatusCode) //os.Exit(1) if err1 != nil &#123; fmt.Println("http get err:", nil) return &#125; if resp.StatusCode != 200 &#123; fmt.Println("404 not found") return &#125; defer resp.Body.Close() var pageContent string buffer := make([]byte, 8192) for &#123; n, err2 := resp.Body.Read(buffer) if n == 0 &#123; fmt.Println("读取网页完成") break &#125; if err2 != nil &amp;&amp; err2 != io.EOF &#123; fmt.Println("err2:", err2) &#125; pageContent += string(buffer[:n]) &#125; osDir, _ := os.Getwd() dir := osDir + "/qunar/" os.Mkdir(dir, os.ModePerm) fileName := dir + strconv.Itoa(articleId) + ".txt" file, err3 := os.Create(fileName) if err3 != nil &#123; fmt.Println("文件创建失败: ", err3) &#125; /* 写入内容到文件*/ image_pat := regexp.MustCompile(`data-retina="(.*?)" class="box_img js_box_img js_lazyimg ajaxloading"`) image_urls := image_pat.FindAllStringSubmatch(pageContent, -1) //var saveImages []string imgDir := osDir + "/qunar/" + strconv.Itoa(articleId) + "/" os.Mkdir(imgDir, os.ModePerm) fileSaveChan := make(chan int) for key, image := range image_urls &#123; key++ go saveImageUrlToFile(key, image[1], imgDir, fileSaveChan) file.WriteString(string(key) + "--" + image[1] + "\n") //saveImages = append(saveImages, image[1]) &#125; imgCount := (len(image_urls)) for i := 0; i &lt; imgCount; i++ &#123; fmt.Printf("图片%d.jpg 保存成功\n", &lt;-fileSaveChan) &#125;&#125;//保存文件件func saveImageUrlToFile(i int, imgUrl, dir string, fileSaveChan chan int) &#123; fileName := dir + strconv.Itoa(i) + ".jpg" file, _ := os.Create(fileName) resp, err1 := http.Get(imgUrl) if err1 != nil &#123; fmt.Println("saveImageUrlToFile err:", err1) return &#125; defer resp.Body.Close() buffer := make([]byte, 8192) for &#123; n, err2 := resp.Body.Read(buffer) if n == 0 &#123; //fmt.Println("saveImageUrlToFile 读取网页完成:", i) break &#125; if err2 != nil &amp;&amp; err2 != io.EOF &#123; fmt.Println("err2:", err2) &#125; //数据写入文件 file.Write(buffer[:n]) &#125; fileSaveChan &lt;- i&#125;]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang爬虫系列二：爬取捧腹网段子及其笑话详情]]></title>
    <url>%2F2019%2F08%2F12%2Fgolang%E7%88%AC%E5%8F%96%E5%86%85%E6%B6%B5%E6%AE%B5%E5%AD%90%E7%AC%91%E8%AF%9D%E5%8F%8A%E4%BA%8C%E7%BA%A7%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[声明：以下内容仅供技术学习简述：爬取 捧腹网 中的 段子页面数据及每一条数据所链接的 笑话详情页。 步骤如下以第一页（https://www.pengfu.com/xiaohua_1.html） 举例 1: 爬取第一页的内容，获取里面每一个笑话的链接; 2: 爬取步骤1获取到的笑话链接的内容，解析笑话标题和内容 3: 将每一页爬取到的标题和内容写入到文件中 代买示例如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140package mainimport ( "fmt" "strconv" "net/http" "io" "regexp" "strings" "os")func main() &#123; var start int var end int fmt.Print("请输入爬取的起始页: ") fmt.Scan(&amp;start) fmt.Print("请输入爬取的结束页: ") fmt.Scan(&amp;end) //爬取业务逻辑 pengfuWorking(start, end)&#125;func pengfuWorking(start, end int) &#123; fmt.Println(start, ":", end) pageChan := make(chan int) for i := start; i &lt;= end; i++ &#123; //开启协程 go pengfuSpider(i, pageChan) &#125; for i := start; i &lt;= end; i++ &#123; //读取管道标识 fmt.Printf("第 %d 页 爬取完成\n", &lt;-pageChan) &#125;&#125;//抓取带有10个段子的urlfunc pengfuSpider(i int, pageChan chan int) &#123; //https://www.pengfu.com/xiaohua_1.html url := "https://www.pengfu.com/xiaohua_" + strconv.Itoa(i) + ".html" //抓取url中的内容 result, err := spiderUrlContent(url) if err != nil &#123; fmt.Println("err message：", err) return &#125; //爬取每一页的段子 urlPat := regexp.MustCompile(`&lt;h1 class="dp-b"&gt;&lt;a href="(?s:(.*?))"`) urls := urlPat.FindAllStringSubmatch(result, -1) //创建存储title,content 的切片 titleSlice := make([]string, 0) contentSlice := make([]string, 0) for _, value := range urls &#123; url := value[1] title, content, err := spiderDetailContent(url) if err != nil &#123; fmt.Println("spiderDetailContent error:", err) continue &#125; titleSlice = append(titleSlice, title) contentSlice = append(contentSlice, content) &#125; saveJokeToFile(i, titleSlice, contentSlice) pageChan &lt;- i&#125;func spiderUrlContent(url string) (result string, err error) &#123; resp, err1 := http.Get(url) if err1 != nil &#123; err = err1 return &#125; defer resp.Body.Close() buffer := make([]byte, 8196) for &#123; n, err2 := resp.Body.Read(buffer) if n == 0 &#123; fmt.Println("读取网页完成:", url) break &#125; if err2 != nil &amp;&amp; err2 != io.EOF &#123; err = err2 return &#125; result += string(buffer[:n]) &#125; return&#125;//爬取一个笑话详情页的标题和内容func spiderDetailContent(url string) (title, content string, err error) &#123; result, err1 := spiderUrlContent(url) if err1 != nil &#123; err = err1 return &#125; //匹配标题 titlePat := regexp.MustCompile(`&lt;h1&gt;(?s:(.*?))\t*&lt;/h1&gt;`) titles := titlePat.FindAllStringSubmatch(result, 1) title = titles[0][1] title = strings.Trim(title, "") title = strings.Replace(title, "&amp;nbsp; ", "", -1) //匹配内容 contentPat := regexp.MustCompile(`&lt;div class="content-txt pt10"&gt;\n*\t*(?s:(.*?))&lt;a`) contents := contentPat.FindAllStringSubmatch(result, 1) content = contents[0][1] content = strings.Trim(content, "\t") content = strings.Replace(content, "\t", "", -1) return&#125;func saveJokeToFile(idx int, titleSlice, contentSlice []string) &#123; //将读取到的数据存储存储为文件 dir, _ := os.Getwd() filePath := dir + "/pengfu_" + strconv.Itoa(idx) + ".txt" file, err := os.Create(filePath) if err != err &#123; fmt.Println("os Create err：", err.Error()) return &#125; defer file.Close() //保存好一个文件就关闭一个文件 for i := 0; i &lt; len(titleSlice); i++ &#123; file.WriteString(titleSlice[i] + ":\t\t" + contentSlice[i] + "\n") &#125;&#125; 爬取到的文本文件示例 12345678910会放坏: 女：“我购物车里的那些水果牛奶饮料零食你赶紧给我买！” 男：“着什么急呀？” 女：“天越来越热了，会放坏的。”肉多舒服: 楼主大四女生，这几天和同一宿舍的女生一起去找工作，在火车站，碰到一个大姐，带着一个四五岁的小男孩侯车，小男孩总是粘着我，要坐我腿上，同宿舍的女生很是羡慕我有人缘，我得意的问小男孩：“你为什么老是喜欢坐姐姐腿上？” 小男孩用稚嫩的口气回答：“姐姐腿上肉多，坐着舒服” 我：“尼玛，这是谁家小哔崽子，快点领走！”卸妆: 一女人问大师：大师，在这么复杂险恶的世界，我一个弱女子如何保护自己？大师说：你把妆卸了！刺十字绣: 家长对孩子的教育真的非常重要。有些男孩，小时候调皮的很，偷了邻居家一根针，家长也不管，一根针嘛，没事。结果孩子长大了，不好好学习每天呆在家里刺十字绣。约会: 网上聊了一妹子，今天见面。问老妈要了二百块钱，老妈问我干嘛用，我说约会，她高高兴兴的就给了。刚出家门，老爸就把我拽到一边说“小子，二百块钱给我一百，半个月不知道烟的滋味了。”我说“爸，这是我和女朋友的约会钱，不能给你。”老爸说了。“你约什么会，那是我刚建的小号，为了抽颗烟我和你聊了半个月了，快拿来。‘’改配方了: 70年代时，有一长辈练铁沙掌，功夫成了之后，可以掌断五砖，凌空碎砖，威风的不得了。 到80年代，只能掌断三砖。 到90年代只能一砖一砖的断了。 他说，一直以为功力退步了，后来才知道烧砖的配方改了。。。报恩: 为什么古装剧里总是有女人会对恩人说：小女子无以为报，唯有以身相许，古代真的存在这种现象吗？ 扯淡，那是因为她喜欢他，要是不喜欢，她就会说：小女子无以为报，唯有来生再报了。问路: 春节回老家时，看到一个老外在向一个农民伯伯问路。只见那个老外一边说着生硬的中文，一边用手笔划，但那个农民伯伯却还是不明白。最后，那个农民伯伯说了一句让我至今难忘的话：“Can you speak English?”老王: 闺蜜是个韩剧迷，她老公是个球迷。某天晚上有球赛，他俩因为抢电视机遥控器打了起来。她一气之下找我哭诉，我问她：“电视遥控器最后归谁了?”她边哭边说：“老王。”我疑惑道：“这个老王是谁呀?我怎么没听说过。”她哭的声音更大了：“一个修电视机的……”丑的先说: 两个女人在大街上吵架，那个骂的吐沫横飞啊。一大妈看不下去了，可谁也不听，都说自己对，对方错。大妈淡淡地来了一句：“那么这样，丑的先说!”瞬间，整个世界都安静了。。。]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang爬虫系列一：爬取豆瓣电影top250数据信息]]></title>
    <url>%2F2019%2F08%2F10%2F%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1top250%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96%2F</url>
    <content type="text"><![CDATA[声明：以下内容仅供技术学习简述：爬取豆瓣电影 top 250 的基础信息，包括电影🎬名，评分，评价人数，电影链接。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131package mainimport ( "fmt" "strconv" "net/http" "io" "regexp" "os")func main() &#123; var start int //起始页 var end int //结束页 fmt.Print("请输入爬取的起始页:") fmt.Scanln(&amp;start) fmt.Print("请输入爬取的结束页:") fmt.Scanln(&amp;end) toWorking(start, end)&#125;func toWorking(start, end int) &#123; fmt.Printf("起始结束页是%d : %d\n", start, end) pageChan := make(chan int) for i := start; i &lt;= end; i++ &#123; go SpiderDoubanPage(i, pageChan) &#125; for i := start; i &lt;= end; i++ &#123; //开启协程 fmt.Printf("第 %d 页 爬取完成\n", &lt;-pageChan) &#125;&#125;func SpiderDoubanPage(i int, pageChan chan int) &#123; //https://movie.douban.com/top250?start=0&amp;filter= //https://movie.douban.com/top250?start=25&amp;filter= //https://movie.douban.com/top250?start=50&amp;filter= url := "https://movie.douban.com/top250?start=" + strconv.Itoa((i-1)*25) //爬取url页面内容【横向爬取】 result, err := httpGetDoubanUrlContent(url) if err != nil &#123; fmt.Println("err message：", err) return &#125; //fmt.Println(result) //使用正则表达式解析内容---电影名称 film_pat := regexp.MustCompile(`width="100" alt="(.*?)"`) FilmNames := film_pat.FindAllStringSubmatch(result, -1) //使用正则表达式解析内容---电影分数 score_pat := regexp.MustCompile(`v:average"&gt;(?s:(.*?))&lt;`) filmScores := score_pat.FindAllStringSubmatch(result, -1) //使用正则表达式解析内容---评价人数 people_pat := regexp.MustCompile(`&lt;span&gt;(?s:(\d*?))人评价&lt;/span&gt;`) peopleNum := people_pat.FindAllStringSubmatch(result, -1) //使用正则表达式解析内容---电影详情页url film_url_pat := regexp.MustCompile(`&lt;a href="(.*?)" class=""&gt;`) filmUrls := film_url_pat.FindAllStringSubmatch(result, -1) //使用正则表达式解析内容---电影序号 film_order_pat := regexp.MustCompile(`&lt;em class=""&gt;(\d*)&lt;/em&gt;`) filmOrders := film_order_pat.FindAllStringSubmatch(result, -1) saveToFile(i, filmOrders, FilmNames, filmScores, peopleNum, filmUrls) pageChan &lt;- i&#125;func httpGetDoubanUrlContent(url string) (result string, err error) &#123; resp, err1 := http.Get(url) if err1 != nil &#123; err = err1 return &#125; defer resp.Body.Close() buffer := make([]byte, 8192) for &#123; n, err2 := resp.Body.Read(buffer) if n == 0 &#123; fmt.Println("读取网页完成") break &#125; if err2 != nil &amp;&amp; err2 != io.EOF &#123; err = err2 return &#125; result += string(buffer[:n]) &#125; return&#125;func saveToFile(idx int, filmOrders, filmNames, filmScores, peopleNum, filmUrls [][]string) &#123; //将读取到的数据存储存储为文件 dir, _ := os.Getwd() filePath := dir + "douban_top_" + strconv.Itoa(idx) + ".txt" file, err := os.Create(filePath) if err != err &#123; fmt.Println("os Create err：", err.Error()) return &#125; defer file.Close() //保存好一个文件就关闭一个文件 file.WriteString( "序号" + "\t" + "电影名称" + "\t" + "电影评分" + "\t" + "评价人数" + "\t" + "链接地址" + "\n") for i := 0; i &lt; len(filmNames); i++ &#123; file.WriteString( filmOrders[i][1] + "\t" + filmNames[i][1] + "\t" + filmScores[i][1] + "\t" + peopleNum[i][1] + "\t" + filmUrls[i][1] + "\n") &#125;&#125; 使用 linux 命令合并爬取的文件 cat crawlerdouban_top_*.txt&gt;top250.txt //文件合并 cat top250.txt |grep -v &#39;序号&#39;&gt;douban_top250_movie_list.txt //去取指定内容 sort -k 1 -n douban_top250_movie_list.txt&gt;douban_top250_movie_list_ordered.txt //排序 看心情在文件头部加上 序号 电影名称 电影评分 评价人数 链接地址 结果如下序号 电影名称 电影评分 评价人数 链接地址1 肖申克的救赎 9.7 1535695 https://movie.douban.com/subject/1292052/2 霸王别姬 9.6 1136522 https://movie.douban.com/subject/1291546/3 这个杀手不太冷 9.4 1388824 https://movie.douban.com/subject/1295644/4 阿甘正传 9.4 1199279 https://movie.douban.com/subject/1292720/5 美丽人生 9.5 702825 https://movie.douban.com/subject/1292063/6 千与千寻 9.3 1231099 https://movie.douban.com/subject/1291561/7 泰坦尼克号 9.4 1140842 https://movie.douban.com/subject/1292722/8 辛德勒的名单 9.5 623915 https://movie.douban.com/subject/1295124/9 盗梦空间 9.3 1189561 https://movie.douban.com/subject/3541415/10 忠犬八公的故事 9.3 795328 https://movie.douban.com/subject/3011091/11 机器人总动员 9.3 788458 https://movie.douban.com/subject/2131459/12 三傻大闹宝莱坞 9.2 1075170 https://movie.douban.com/subject/3793023/13 放牛班的春天 9.3 748223 https://movie.douban.com/subject/1291549/14 海上钢琴师 9.2 872907 https://movie.douban.com/subject/1292001/15 楚门的世界 9.2 832134 https://movie.douban.com/subject/1292064/16 大话西游之大圣娶亲 9.2 835440 https://movie.douban.com/subject/1292213/17 星际穿越 9.3 854952 https://movie.douban.com/subject/1889243/18 龙猫 9.2 739493 https://movie.douban.com/subject/1291560/19 熔炉 9.3 492270 https://movie.douban.com/subject/5912992/20 教父 9.3 536821 https://movie.douban.com/subject/1291841/21 无间道 9.2 686756 https://movie.douban.com/subject/1307914/22 疯狂动物城 9.2 961506 https://movie.douban.com/subject/25662329/23 当幸福来敲门 9.1 870538 https://movie.douban.com/subject/1849031/24 怦然心动 9.0 971877 https://movie.douban.com/subject/3319755/25 触不可及 9.2 569502 https://movie.douban.com/subject/6786002/26 蝙蝠侠：黑暗骑士 9.1 561534 https://movie.douban.com/subject/1851857/27 乱世佳人 9.3 394279 https://movie.douban.com/subject/1300267/28 活着 9.2 444310 https://movie.douban.com/subject/1292365/29 控方证人 9.6 199996 https://movie.douban.com/subject/1296141/30 少年派的奇幻漂流 9.0 854147 https://movie.douban.com/subject/1929463/31 指环王3：王者无敌 9.2 432241 https://movie.douban.com/subject/1291552/32 摔跤吧！爸爸 9.0 848439 https://movie.douban.com/subject/26387939/33 天空之城 9.1 507243 https://movie.douban.com/subject/1291583/34 鬼子来了 9.2 361061 https://movie.douban.com/subject/1291858/35 十二怒汉 9.4 257052 https://movie.douban.com/subject/1293182/36 天堂电影院 9.2 416891 https://movie.douban.com/subject/1291828/37 飞屋环游记 9.0 773645 https://movie.douban.com/subject/2129039/38 大话西游之月光宝盒 9.0 675104 https://movie.douban.com/subject/1299398/39 哈尔的移动城堡 9.0 570115 https://movie.douban.com/subject/1308807/40 搏击俱乐部 9.0 543030 https://movie.douban.com/subject/1292000/41 罗马假日 9.0 576438 https://movie.douban.com/subject/1293839/42 末代皇帝 9.2 354693 https://movie.douban.com/subject/1293172/43 寻梦环游记 9.0 811262 https://movie.douban.com/subject/20495023/44 闻香识女人 9.0 493633 https://movie.douban.com/subject/1298624/45 辩护人 9.2 340911 https://movie.douban.com/subject/21937445/46 素媛 9.2 322715 https://movie.douban.com/subject/21937452/47 窃听风暴 9.1 340301 https://movie.douban.com/subject/1900841/48 死亡诗社 9.0 414748 https://movie.douban.com/subject/1291548/49 两杆大烟枪 9.1 369786 https://movie.douban.com/subject/1293350/50 飞越疯人院 9.1 373765 https://movie.douban.com/subject/1292224/51 指环王2：双塔奇兵 9.0 405233 https://movie.douban.com/subject/1291572/52 教父2 9.2 291589 https://movie.douban.com/subject/1299131/53 指环王1：魔戒再现 9.0 454776 https://movie.douban.com/subject/1291571/54 狮子王 9.0 441123 https://movie.douban.com/subject/1301753/55 V字仇杀队 8.9 634942 https://movie.douban.com/subject/1309046/56 美丽心灵 9.0 442940 https://movie.douban.com/subject/1306029/57 饮食男女 9.1 312944 https://movie.douban.com/subject/1291818/58 海豚湾 9.3 246512 https://movie.douban.com/subject/3442220/59 情书 8.9 544709 https://movie.douban.com/subject/1292220/60 何以为家 9.1 353458 https://movie.douban.com/subject/30170448/61 钢琴家 9.1 293055 https://movie.douban.com/subject/1296736/62 大闹天宫 9.3 190080 https://movie.douban.com/subject/1418019/63 本杰明·巴顿奇事 8.9 577017 https://movie.douban.com/subject/1485260/64 哈利·波特与魔法石 8.9 466720 https://movie.douban.com/subject/1295038/65 看不见的客人 8.8 635451 https://movie.douban.com/subject/26580232/66 黑客帝国 8.9 434713 https://movie.douban.com/subject/1291843/67 西西里的美丽传说 8.8 552815 https://movie.douban.com/subject/1292402/68 小鞋子 9.2 218270 https://movie.douban.com/subject/1303021/69 美国往事 9.2 248262 https://movie.douban.com/subject/1292262/70 拯救大兵瑞恩 9.0 370031 https://movie.douban.com/subject/1292849/71 让子弹飞 8.8 937467 https://movie.douban.com/subject/3742360/72 音乐之声 9.0 340645 https://movie.douban.com/subject/1294408/73 致命魔术 8.8 497893 https://movie.douban.com/subject/1780330/74 猫鼠游戏 8.9 404409 https://movie.douban.com/subject/1305487/75 七宗罪 8.8 593674 https://movie.douban.com/subject/1292223/76 被嫌弃的松子的一生 8.9 445775 https://movie.douban.com/subject/1787291/77 低俗小说 8.8 494334 https://movie.douban.com/subject/1291832/78 沉默的羔羊 8.8 497708 https://movie.douban.com/subject/1293544/79 蝴蝶效应 8.8 548478 https://movie.douban.com/subject/1292343/80 春光乍泄 8.9 367593 https://movie.douban.com/subject/1292679/81 勇敢的心 8.9 388081 https://movie.douban.com/subject/1294639/82 天使爱美丽 8.7 657882 https://movie.douban.com/subject/1292215/83 穿条纹睡衣的男孩 9.0 256883 https://movie.douban.com/subject/3008247/84 剪刀手爱德华 8.7 675841 https://movie.douban.com/subject/1292370/85 心灵捕手 8.8 402941 https://movie.douban.com/subject/1292656/86 禁闭岛 8.8 537386 https://movie.douban.com/subject/2334904/87 布达佩斯大饭店 8.8 500379 https://movie.douban.com/subject/11525673/88 阿凡达 8.7 787025 https://movie.douban.com/subject/1652587/89 入殓师 8.8 401708 https://movie.douban.com/subject/2149806/90 幽灵公主 8.9 336781 https://movie.douban.com/subject/1297359/91 加勒比海盗 8.7 519035 https://movie.douban.com/subject/1298070/92 摩登时代 9.3 148862 https://movie.douban.com/subject/1294371/93 致命ID 8.7 455343 https://movie.douban.com/subject/1297192/94 断背山 8.7 448806 https://movie.douban.com/subject/1418834/95 阳光灿烂的日子 8.8 379539 https://movie.douban.com/subject/1291875/96 重庆森林 8.7 471704 https://movie.douban.com/subject/1291999/97 第六感 8.8 326415 https://movie.douban.com/subject/1297630/98 狩猎 9.1 196797 https://movie.douban.com/subject/6985810/99 喜剧之王 8.7 513460 https://movie.douban.com/subject/1302425/100 玛丽和马克思 8.9 290154 https://movie.douban.com/subject/3072124/101 消失的爱人 8.7 525034 https://movie.douban.com/subject/21318488/102 告白 8.7 467513 https://movie.douban.com/subject/4268598/103 小森林 夏秋篇 9.0 226137 https://movie.douban.com/subject/25814705/104 大鱼 8.8 347484 https://movie.douban.com/subject/1291545/105 一一 9.0 210191 https://movie.douban.com/subject/1292434/106 阳光姐妹淘 8.8 378032 https://movie.douban.com/subject/4917726/107 爱在黎明破晓前 8.8 326958 https://movie.douban.com/subject/1296339/108 请以你的名字呼唤我 8.8 327024 https://movie.douban.com/subject/26799731/109 射雕英雄传之东成西就 8.7 384745 https://movie.douban.com/subject/1316510/110 甜蜜蜜 8.8 307227 https://movie.douban.com/subject/1305164/111 侧耳倾听 8.9 256439 https://movie.douban.com/subject/1297052/112 红辣椒 8.9 210659 https://movie.douban.com/subject/1865703/113 驯龙高手 8.7 438648 https://movie.douban.com/subject/2353023/114 倩女幽魂 8.7 399855 https://movie.douban.com/subject/1297447/115 超脱 8.8 256836 https://movie.douban.com/subject/5322596/116 杀人回忆 8.8 314334 https://movie.douban.com/subject/1300299/117 海蒂和爷爷 9.1 142601 https://movie.douban.com/subject/25958717/118 恐怖直播 8.7 349058 https://movie.douban.com/subject/21360417/119 菊次郎的夏天 8.8 284490 https://movie.douban.com/subject/1293359/120 爱在日落黄昏时 8.8 285141 https://movie.douban.com/subject/1291990/121 7号房的礼物 8.8 276596 https://movie.douban.com/subject/10777687/122 小森林 冬春篇 9.0 196346 https://movie.douban.com/subject/25814707/123 风之谷 8.8 246043 https://movie.douban.com/subject/1291585/124 哈利·波特与死亡圣器(下) 8.7 408422 https://movie.douban.com/subject/3011235/125 我不是药神 9.0 1181641 https://movie.douban.com/subject/26752088/126 幸福终点站 8.7 310524 https://movie.douban.com/subject/1292274/127 蝙蝠侠：黑暗骑士崛起 8.7 415939 https://movie.douban.com/subject/3395373/128 上帝之城 8.9 200345 https://movie.douban.com/subject/1292208/129 萤火之森 8.8 261708 https://movie.douban.com/subject/5989818/130 借东西的小人阿莉埃蒂 8.8 308863 https://movie.douban.com/subject/4202302/131 超能陆战队 8.6 565299 https://movie.douban.com/subject/11026735/132 唐伯虎点秋香 8.5 545655 https://movie.douban.com/subject/1306249/133 神偷奶爸 8.5 572719 https://movie.douban.com/subject/3287562/134 无人知晓 9.1 133082 https://movie.douban.com/subject/1292337/135 怪兽电力公司 8.7 363701 https://movie.douban.com/subject/1291579/136 电锯惊魂 8.7 287704 https://movie.douban.com/subject/1417598/137 岁月神偷 8.7 394423 https://movie.douban.com/subject/3792799/138 玩具总动员3 8.8 278994 https://movie.douban.com/subject/1858711/139 血战钢锯岭 8.7 472814 https://movie.douban.com/subject/26325320/140 谍影重重3 8.8 254835 https://movie.douban.com/subject/1578507/141 疯狂原始人 8.7 518689 https://movie.douban.com/subject/1907966/142 七武士 9.2 108944 https://movie.douban.com/subject/1295399/143 英雄本色 8.7 276917 https://movie.douban.com/subject/1297574/144 喜宴 8.9 195228 https://movie.douban.com/subject/1303037/145 真爱至上 8.6 430547 https://movie.douban.com/subject/1292401/146 萤火虫之墓 8.7 272296 https://movie.douban.com/subject/1293318/147 东邪西毒 8.6 362487 https://movie.douban.com/subject/1292328/148 傲慢与偏见 8.5 430151 https://movie.douban.com/subject/1418200/149 时空恋旅人 8.7 302907 https://movie.douban.com/subject/10577869/150 贫民窟的百万富翁 8.6 497991 https://movie.douban.com/subject/2209573/151 黑天鹅 8.5 549429 https://movie.douban.com/subject/1978709/152 记忆碎片 8.6 373474 https://movie.douban.com/subject/1304447/153 心迷宫 8.7 274327 https://movie.douban.com/subject/25917973/154 纵横四海 8.8 226602 https://movie.douban.com/subject/1295409/155 教父3 8.8 191865 https://movie.douban.com/subject/1294240/156 荒蛮故事 8.8 223635 https://movie.douban.com/subject/24750126/157 完美的世界 9.1 123076 https://movie.douban.com/subject/1300992/158 达拉斯买家俱乐部 8.7 264828 https://movie.douban.com/subject/1793929/159 雨人 8.7 267637 https://movie.douban.com/subject/1291870/160 三块广告牌 8.7 493952 https://movie.douban.com/subject/26611804/161 花样年华 8.6 337477 https://movie.douban.com/subject/1291557/162 被解救的姜戈 8.7 357721 https://movie.douban.com/subject/6307447/163 卢旺达饭店 8.9 161524 https://movie.douban.com/subject/1291822/164 你的名字。 8.4 757251 https://movie.douban.com/subject/26683290/165 海边的曼彻斯特 8.6 294826 https://movie.douban.com/subject/25980443/166 我是山姆 8.9 155512 https://movie.douban.com/subject/1306861/167 头脑特工队 8.7 340013 https://movie.douban.com/subject/10533913/168 你看起来好像很好吃 8.8 202385 https://movie.douban.com/subject/4848115/169 恋恋笔记本 8.5 385616 https://movie.douban.com/subject/1309163/170 哪吒闹海 9.0 129640 https://movie.douban.com/subject/1307315/171 无敌破坏王 8.7 306834 https://movie.douban.com/subject/6534248/172 虎口脱险 8.9 141090 https://movie.douban.com/subject/1296909/173 冰川时代 8.5 379209 https://movie.douban.com/subject/1291578/174 二十二 8.7 168873 https://movie.douban.com/subject/26430107/175 海洋 9.0 116507 https://movie.douban.com/subject/3443389/176 雨中曲 9.0 125013 https://movie.douban.com/subject/1293460/177 爆裂鼓手 8.7 324492 https://movie.douban.com/subject/25773932/178 未麻的部屋 8.9 147477 https://movie.douban.com/subject/1395091/179 模仿游戏 8.6 355368 https://movie.douban.com/subject/10463953/180 一个叫欧维的男人决定去死 8.8 195643 https://movie.douban.com/subject/26628357/181 忠犬八公物语 9.1 96747 https://movie.douban.com/subject/1959195/182 燃情岁月 8.8 185142 https://movie.douban.com/subject/1295865/183 人工智能 8.6 258634 https://movie.douban.com/subject/1302827/184 魔女宅急便 8.6 281054 https://movie.douban.com/subject/1307811/185 房间 8.8 229618 https://movie.douban.com/subject/25724855/186 穿越时空的少女 8.6 250139 https://movie.douban.com/subject/1937946/187 天书奇谭 9.1 91667 https://movie.douban.com/subject/1428581/188 恐怖游轮 8.4 459129 https://movie.douban.com/subject/3011051/189 魂断蓝桥 8.8 164770 https://movie.douban.com/subject/1293964/190 黑客帝国3：矩阵革命 8.7 225709 https://movie.douban.com/subject/1302467/191 海街日记 8.7 214152 https://movie.douban.com/subject/25895901/192 猜火车 8.5 306564 https://movie.douban.com/subject/1292528/193 罗生门 8.8 175470 https://movie.douban.com/subject/1291879/194 完美陌生人 8.5 333893 https://movie.douban.com/subject/26614893/195 阿飞正传 8.5 295833 https://movie.douban.com/subject/1305690/196 头号玩家 8.7 823877 https://movie.douban.com/subject/4920389/197 香水 8.5 362383 https://movie.douban.com/subject/1760622/198 功夫 8.4 465611 https://movie.douban.com/subject/1291543/199 可可西里 8.7 171199 https://movie.douban.com/subject/1308857/200 朗读者 8.5 333438 https://movie.douban.com/subject/2213597/201 谍影重重2 8.6 219036 https://movie.douban.com/subject/1308767/202 浪潮 8.7 173378 https://movie.douban.com/subject/2297265/203 牯岭街少年杀人事件 8.8 149429 https://movie.douban.com/subject/1292329/204 谍影重重 8.6 261073 https://movie.douban.com/subject/1304102/205 战争之王 8.6 224942 https://movie.douban.com/subject/1419936/206 地球上的星星 8.9 120790 https://movie.douban.com/subject/2363506/207 疯狂的石头 8.4 452026 https://movie.douban.com/subject/1862151/208 初恋这件小事 8.3 633902 https://movie.douban.com/subject/4739952/209 青蛇 8.5 303900 https://movie.douban.com/subject/1303394/210 惊魂记 8.9 120359 https://movie.douban.com/subject/1293181/211 终结者2：审判日 8.6 198690 https://movie.douban.com/subject/1291844/212 源代码 8.4 520617 https://movie.douban.com/subject/3075287/213 爱在午夜降临前 8.8 167120 https://movie.douban.com/subject/10808442/214 步履不停 8.8 139427 https://movie.douban.com/subject/2222996/215 新龙门客栈 8.5 258004 https://movie.douban.com/subject/1292287/216 奇迹男孩 8.6 323039 https://movie.douban.com/subject/26787574/217 小萝莉的猴神大叔 8.5 271364 https://movie.douban.com/subject/26393561/218 追随 8.9 108391 https://movie.douban.com/subject/1397546/219 一次别离 8.7 168140 https://movie.douban.com/subject/5964718/220 无耻混蛋 8.5 294062 https://movie.douban.com/subject/1438652/221 再次出发之纽约遇见你 8.5 245335 https://movie.douban.com/subject/6874403/222 釜山行 8.4 561902 https://movie.douban.com/subject/25986180/223 血钻 8.6 196331 https://movie.douban.com/subject/1428175/224 东京物语 9.2 72955 https://movie.douban.com/subject/1291568/225 撞车 8.6 219372 https://movie.douban.com/subject/1388216/226 彗星来的那一夜 8.5 276087 https://movie.douban.com/subject/25807345/227 城市之光 9.3 65047 https://movie.douban.com/subject/1293908/228 2001太空漫游 8.7 149476 https://movie.douban.com/subject/1292226/229 梦之安魂曲 8.7 144757 https://movie.douban.com/subject/1292270/230 新世界 8.7 149430 https://movie.douban.com/subject/10437779/231 绿里奇迹 8.7 145109 https://movie.douban.com/subject/1300374/232 疯狂的麦克斯4：狂暴之路 8.6 296326 https://movie.douban.com/subject/3592854/233 聚焦 8.8 172697 https://movie.douban.com/subject/25954475/234 E.T. 外星人 8.5 211210 https://movie.douban.com/subject/1294638/235 这个男人来自地球 8.5 244977 https://movie.douban.com/subject/2300586/236 末路狂花 8.7 138086 https://movie.douban.com/subject/1291992/237 黑鹰坠落 8.6 169479 https://movie.douban.com/subject/1291824/238 发条橙 8.5 237973 https://movie.douban.com/subject/1292233/239 遗愿清单 8.6 191251 https://movie.douban.com/subject/1867345/240 变脸 8.4 272586 https://movie.douban.com/subject/1292659/241 勇闯夺命岛 8.6 182137 https://movie.douban.com/subject/1292728/242 国王的演讲 8.4 435891 https://movie.douban.com/subject/4023638/243 我爱你 9.0 84663 https://movie.douban.com/subject/5908478/244 黄金三镖客 9.1 71082 https://movie.douban.com/subject/1401118/245 千钧一发 8.7 131207 https://movie.douban.com/subject/1300117/246 非常嫌疑犯 8.6 163295 https://movie.douban.com/subject/1292214/247 秒速5厘米 8.3 412652 https://movie.douban.com/subject/2043546/248 驴得水 8.3 502838 https://movie.douban.com/subject/25921812/249 卡萨布兰卡 8.6 160541 https://movie.douban.com/subject/1296753/250 四个春天 8.9 87331 https://movie.douban.com/subject/27191492/]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP foreach循环使用&引用的小坑]]></title>
    <url>%2F2019%2F08%2F07%2FPHP-foreach%E5%BE%AA%E7%8E%AF%E4%BD%BF%E7%94%A8-%E5%BC%95%E7%94%A8%E7%9A%84%E5%B0%8F%E5%9D%91%2F</url>
    <content type="text"><![CDATA[源起：今天有小🔥伴发了一段 PHP 代码问执行结果和常规逻辑思考🤔结果为啥么不一样。代码如下，当时只是说和 foreach 使用 &amp; 有关。也没深入思考到底是什么关系，午睡过后，心血来潮的想搞搞这个问题，故做如下记录。 小伙伴给的原始代码如下 123456789101112131415161718&lt;?php $arr = [1, 2, 4, 8]; foreach ($arr as &amp;$val) &#123; //四次循环迭代后依次输出 1, 2, 4, 8; 没任何毛病 echo $val . PHP_EOL; &#125; print_r($arr); echo "************************" . PHP_EOL; foreach ($arr as $val) &#123; print_r($arr); echo $val . PHP_EOL; echo "###################" . PHP_EOL; &#125; //echo 依次打印的是： 1，2，4，4 [(O_O)]? 代码执行结果如下图 那么问题来了，第一次输出 1，2，4，8 没有任何问题。但是，但是，但是为什么第二次输出的是 1, 2, 4, 4 而不是 1、2 4、8 呢？查询 PHP foreach 文档 有辣么一句特别提醒 Warning 数组最后一个元素的 $value 引用在 foreach 循环之后仍会保留。建议使用 unset() 来将其销毁。看此提示，冥冥之中好像知道了答案。 第一次 foreach 由于使用的是 &amp; 引用赋值，在循环完成后如果没有 unset($val) 会保留最后一个元素的 $val引用 第二次 foreach 由于使用的和第一次同样的迭代变量 $val, 数组的最后一个元素 $arr[3] 和当前循环迭代值 $val 指向同一个变量地址，此时 $val 值改变时 $arr[3] 的值也跟着改变了。 用上图说明 原始数组为图中 A区域 数组 第 0 次循环迭代：最后一个元素 $arr[3] 和 $val 即($arr[0]) 值相同。$arr[3] = $val = 1，如图中 0区域 12345678Array( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 4 [3] =&gt; 1)第0次循环结果：1 第 1 次循环迭代：最后一个元素 $arr[3] 和 $val 即($arr[1]) 值相同。$arr[3] = $val = 2，如图中 1区域 12345678Array( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 4 [3] =&gt; 2)第1次循环结果：2 第 2 次循环迭代：最后一个元素 $arr[3] 和 $val 即($arr[2]) 值相同。$arr[3] = $val = 4，如图中 2区域 12345678Array( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 4 [3] =&gt; 4)第2次循环结果：4 第 3 次循环迭代：最后一个元素 $arr[3] 和 $val 即($arr[3]) 值相同。$arr[3] = $val = 4，如图中 3区域 12345678Array( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 4 [3] =&gt; 4)第2次循环结果：4 综上，第二次循环 1, 2, 4, 4 就是这么来的 😜]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang爬虫系列零：爬取百度贴吧内容]]></title>
    <url>%2F2019%2F08%2F04%2Fgolang%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%E5%86%85%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[声明：以下内容仅供技术学习爬虫实现步骤1：获取需要爬取URL的地址（以 JavaScript吧 举例） http://tieba.baidu.com/f?kw=javascript&amp;ie=utf-8&amp;pn=0 http://tieba.baidu.com/f?kw=javascript&amp;ie=utf-8&amp;pn=50 http://tieba.baidu.com/f?kw=javascript&amp;ie=utf-8&amp;pn=1502：使用 http.Get(url) 获取到每一个URL的内容 3：将或得到URL的内容写入文件 注意文件命名 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102package mainimport ( "fmt" "net/http" "io" "strconv" "os" "time")//贴吧的URL//http://tieba.baidu.com/f?kw=javascript&amp;ie=utf-8&amp;pn=0//http://tieba.baidu.com/f?kw=javascript&amp;ie=utf-8&amp;pn=50func main() &#123; start := time.Now() //确认起始页和终止页 var startPage int var endPage int fmt.Print("请输入起始页:") fmt.Scanln(&amp;startPage) if startPage &lt;= 1 &#123; startPage = 1 &#125; fmt.Print("请输入终止页:") fmt.Scanln(&amp;endPage) if endPage &lt;= 1 &#123; endPage = 1 &#125; working(startPage, endPage) cost := time.Since(start) fmt.Printf("耗时 = [%s] ", cost)&#125;func working(startPage, endPage int) &#123; fmt.Printf("正在爬取第%d页到%d页的信息...\n", startPage, endPage) pageChan := make(chan int) //循环爬取每一页 for i := startPage; i &lt;= endPage; i++ &#123; //开启协程 go SpiderPage(i, pageChan) //SpiderPage(i, pageChan) &#125; for i := startPage; i &lt;= endPage; i++ &#123; //开启协程 fmt.Printf("第 %d 页 爬取完成\n", &lt;-pageChan) &#125;&#125;//爬取单个页面的函数func SpiderPage(i int, pageChan chan int) &#123; baseUrl := "http://tieba.baidu.com/f?kw=javascript&amp;ie=utf-8&amp;pn=" + strconv.Itoa((i-1)*50) fmt.Println("正在获取第", i, "页的内容") result, err := httpGetUrl(baseUrl) if err != nil &#123; fmt.Println("http get error, Msg", err.Error()) return &#125; //将读取到的数据存储存储为文件 file, err := os.Create("JavaScript_" + strconv.Itoa(i) + ".html") if err != err &#123; fmt.Println("os Create err：", err.Error()) return &#125; file.WriteString(result) file.Close() //保存好一个文件就关闭一个文件 pageChan &lt;- i&#125;//爬取内容func httpGetUrl(url string) (result string, err error) &#123; resp, err1 := http.Get(url) if err1 != nil &#123; err = err1 return &#125; //关闭 defer resp.Body.Close() //读取数据 buffer := make([]byte, 8196) for &#123; //读取的内容至于buffer容器 n, err2 := resp.Body.Read(buffer) if n == 0 &#123; fmt.Println("读取网页完成") break &#125; if err2 != nil &amp;&amp; err2 != io.EOF &#123; err = err2 return &#125; //累次相加每一次读到的Buffer数据，存入result, 一次性返回 result += string(buffer[:n]) &#125; return`]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员数学基础 之 矩阵]]></title>
    <url>%2F2019%2F08%2F03%2F%E7%A8%8B%E5%BA%8F%E5%91%98%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%9F%A9%E9%98%B5%2F</url>
    <content type="text"><![CDATA[1：矩阵相加 2：矩阵相乘（不符合交换律） 标量 * 矩阵 变量 * 矩阵的每一个元素，得到一个新矩阵 矩阵 * 矩阵 用矩阵的 第1行 分别去 乘以 矩阵的每一列 用矩阵的 第N行 分别去 乘以 矩阵的每一列 矩阵A * 矩阵B != 矩阵B * 矩阵A 矩阵相乘的条件：前面矩阵的列数 等于 后面矩阵的行数]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 部署测试]]></title>
    <url>%2F2019%2F08%2F02%2Fhexo-test-deploy%2F</url>
    <content type="text"><![CDATA[Hexo 部署测试1：通过日志方式统计 1234567file_put_contents("loc.log", microtime(true).'_end'."-----$lat@2".PHP_EOL, FILE_APPEND);file_put_contents('exelog/'.time().'.log', var_export(Yii::$app-&gt;request-&gt;post(), true));$postdata = file_get_contents("php://input");$postdata = json_decode($postdata,true); 2：二维数组指定字段排序12345array_multisort (array_column($citiesMddBaseInfo, ‘hot’), SORT_DESC, $citiesMddBaseInfo);array_multisort(array_column($hotelList, 'price'), SORT_ASC, $hotelList);array_multisort($hotelList,SORT_ASC, array_column($hotelList, 'price'));]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
